Termite is a generic distributed compilation system.

The master distributes the compilation to workers.  Workers run
arbitrary binaries chrooted in a FUSE mirror of the master's file
system, and then ship the results back to the master.


CAVEATS

Work in progress.


INSTALL

Get

  git clone git://github.com/hanwen/go-fuse.git
  git clone git://github.com/hanwen/termite.git
  (cd go-fuse && sh all.bash)

  cd termite
    ln -s ../go-fuse/fuse ../go-fuse/unionfs .
    sh all.bash


I do not goinstall go-fuse, since I develop go-fuse in tandem with
termite, but with some tweaks to the Makefile it should work.

Testing:

  ./worker.sh >& worker.log &
  ./master.sh >& master.log &
  export PATH=/tmp/tools/termite:${PATH}
  make -j20


SECURITY

* Worker and master use plaintext TCP/IP, and use a shared secret to
  authenticate the connection with HMAC-SHA1.

* If this connection scheme gets broken,

  - a malicious user may request all files from the master with UID
    running the master.

  - a malicious user may try to run a binary on the worker that tries
    to break out of chroot.

* Worker runs binaries as nobody in a chroot of a FUSE file system.

* Wrapper and master run as the same user and use IPC unix domain
  sockets to communicate.  The socket mode is 0700.

* TODO - /tmp files are played back from worker to master.  This is
  still a security problem.


TODO

* Coordinator

* Load throttling on worker.

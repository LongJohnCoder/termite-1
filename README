Termite is a generic distributed compilation system.

The master distributes the compilation to workers.  Workers run
arbitrary binaries chrooted in a FUSE mirror of the master's file
system, and then ship the results back to the master.


CAVEATS

Work in progress.


INSTALL

Get

  git clone git://github.com/hanwen/go-fuse.git
  git clone git://github.com/hanwen/termite.git
  (cd go-fuse && sh all.bash)

  cd termite
    ln -s ../go-fuse/fuse ../go-fuse/unionfs .
    sh all.bash

I do not goinstall go-fuse, since I develop go-fuse in tandem with
termite, but with some tweaks to the Makefile it should work.


RUNNING

  sudo ${TERMITE_DIR}/bin/worker/worker -jobs 4 \
    -chroot ${TERMITE_DIR}/bin/chroot/chroot &
  cd ${PROJECT}
  ${TERMITE_DIR}/bin/master/master -jobs 4 &
  ln -s ${TERMITE_DIR}/bin/tool/tool gcc
  ./gcc 


SECURITY

* The worker runs binaries as user 'nobody' in a chroot of a FUSE file
  system.  It needs root permission for the following actions:
  
  - mount a FUSE fs as allow_other
  - chroot to FUSE fs
  - change uid to user 'nobody'

* Worker and master use plaintext TCP/IP, and use a shared secret +
  HMAC-SHA1 to authenticate the connection.  See
  https://github.com/hanwen/termite/blob/master/termite/connection.go
  for details.

  If this connection scheme gets broken,

  - a malicious user may request all files from the master that the
    UID running the master has access to.

  - a malicious user may try to run a binary on the worker that tries
    to break out of chroot.

* Wrapper and master run as the same user and use IPC unix domain
  sockets to communicate.  The socket mode is 0700.

* TODO - /tmp files are played back from worker to master.  This is
  still a security problem.


TODO

* Coordinator

* Reconnecting.

* More sophisticated exclusion for exporting file systems.

* Security review for the connection scheme.
